// package ai_service

// import (
// 	"bytes"
// 	"encoding/json"
// 	"fmt"
// 	"net/http"
// 	"os"
// )

// // AIRequest represents a request to the AI API
// type AIRequest struct {
// 	Prompt    string `json:"prompt"`
// 	MaxTokens int    `json:"max_tokens"`
// }

// // AIResponse represents a response from the AI API
// type AIResponse struct {
// 	Choices []struct {
// 		Text string `json:"text"`
// 	} `json:"choices"`
// }

// // GenerateReferralMessage generates a referral message using AI
// func GenerateReferralMessage(requester, referrer, role, company string) (string, error) {
// 	groqAPIKey := os.Getenv("GROQ_API_KEY")
// 	if groqAPIKey == "" {
// 		return "", fmt.Errorf("GROQ_API_KEY not set in environment variables")
// 	}

// 	prompt := fmt.Sprintf(`
//     Generate a professional and concise referral request message for %s, who is looking for a referral to %s.
//     They have role as %s and would like to request %s for a referral.
//     The message should be polite and engaging.
//     `, requester, company, role, referrer)

// 	reqBody := AIRequest{
// 		Prompt:    prompt,
// 		MaxTokens: 150,
// 	}

// 	jsonBody, err := json.Marshal(reqBody)
// 	if err != nil {
// 		return "", err
// 	}

// 	req, err := http.NewRequest("POST", "https://api.groq.com/openai/v1/chat/completions", bytes.NewBuffer(jsonBody))
// 	if err != nil {
// 		return "", err
// 	}

// 	req.Header.Set("Authorization", "Bearer "+groqAPIKey)
// 	req.Header.Set("Content-Type", "application/json")

// 	client := &http.Client{}
// 	resp, err := client.Do(req)
// 	if err != nil {
// 		return "", err
// 	}
// 	defer resp.Body.Close()

// 	if resp.StatusCode != http.StatusOK {
// 		return "", fmt.Errorf("API returned non-200 status code: %d", resp.StatusCode)
// 	}

// 	var aiResp AIResponse
// 	err = json.NewDecoder(resp.Body).Decode(&aiResp)
// 	if err != nil {
// 		return "", err
// 	}

// 	if len(aiResp.Choices) == 0 {
// 		return "", fmt.Errorf("no text generated by AI")
// 	}

// 	return aiResp.Choices[0].Text, nil
// }


package ai_service

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"os"
)

// AIRequest represents a request to the AI API
type AIRequest struct {
	Model    string `json:"model"`
	Messages []struct {
		Role    string `json:"role"`
		Content string `json:"content"`
	} `json:"messages"`
	MaxTokens int `json:"max_tokens"`
}

// AIResponse represents a response from the AI API
type AIResponse struct {
	Choices []struct {
		Message struct {
			Content string `json:"content"`
		} `json:"message"`
	} `json:"choices"`
}

// GenerateReferralMessage generates a referral message using AI
func GenerateReferralMessage(requester, referrer, role, company string) (string, error) {
	groqAPIKey := os.Getenv("GROQ_API_KEY")
	if groqAPIKey == "" {
		return "", fmt.Errorf("GROQ_API_KEY not set in environment variables")
	}

	prompt := fmt.Sprintf(`
Generate a professional and concise referral request message for %s, who is looking for a referral to %s.
They have the role of %s and would like to request %s for a referral.
The message should be polite and engaging.
`, requester, company, role, referrer)

	// Construct the request payload
	reqBody := AIRequest{
		Model: "gemma2-9b-it", // Ensure the correct model is used
		Messages: []struct {
			Role    string `json:"role"`
			Content string `json:"content"`
		}{
			{Role: "user", Content: prompt},
		},
		MaxTokens: 150,
	}

	// Convert struct to JSON
	jsonBody, err := json.Marshal(reqBody)
	if err != nil {
		return "", err
	}

	// Create HTTP request
	req, err := http.NewRequest("POST", "https://api.groq.com/openai/v1/chat/completions", bytes.NewBuffer(jsonBody))
	if err != nil {
		return "", err
	}

	// Set headers
	req.Header.Set("Authorization", "Bearer "+groqAPIKey)
	req.Header.Set("Content-Type", "application/json")

	// Send the request
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	// Handle non-200 responses
	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("API returned non-200 status code: %d", resp.StatusCode)
	}

	// Parse response
	var aiResp AIResponse
	err = json.NewDecoder(resp.Body).Decode(&aiResp)
	if err != nil {
		return "", err
	}

	// Extract response content
	if len(aiResp.Choices) == 0 || aiResp.Choices[0].Message.Content == "" {
		return "", fmt.Errorf("no text generated by AI")
	}

	return aiResp.Choices[0].Message.Content, nil
}
